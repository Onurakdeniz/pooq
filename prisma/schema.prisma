generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @unique
  fid        Int?        @unique
  userName   String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  bookmarks  Bookmark[]
  llmFeeds   LLMFeed[]
  categories Category[]  @relation("CategoryToUser")
  parentTags ParentTag[] @relation("ParentTagToUser")
}

model Author {
  fid       Int      @id @unique
  userName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  stories   Story[]
}

model Story {
  id          Int         @id @default(autoincrement())
  hash        String      @unique
  authorId    Int
  text        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isProcessed Boolean     @default(false)
  isPromoted  Boolean      @default(false)
  bookmarks   Bookmark[]
  extraction  Extraction?
  posts       Post[]
  author      Author      @relation(fields: [authorId], references: [fid], onDelete: Cascade)
}

model Post {
  id              String      @id @unique @default(uuid())
  hash            String      @unique
  authorId        Int
  text            String
  storyId         Int
  isSpamSuspected Boolean?
  isStoryRelated  Boolean?
  isProcessed     Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bookmarks       Bookmark[]
  extraction      Extraction?
  author          Author      @relation(fields: [authorId], references: [fid], onDelete: Cascade)
  story           Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Extraction {
  id               Int                    @id @default(autoincrement())
  storyId          Int?                   @unique
  postId           String?                @unique
  title            String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  view             String?
  type             StoryType?
  description      String?
  categories       CategoryOnExtraction[]
  entities         EntityOnExtraction[]
  post             Post?                  @relation(fields: [postId], references: [id], onDelete: Cascade)
  story            Story?                 @relation(fields: [storyId], references: [id], onDelete: Cascade)
  referencePhrases ReferencePhrase[]
  referenceWords   ReferenceWord[]
  tags             TagOnExtraction[]
}

model ReferencePhrase {
  id           String     @id @default(uuid())
  phrase       String
  source       String?
  extractionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@unique([phrase, extractionId])
}

model ReferenceWord {
  id           String     @id @default(uuid())
  word         String
  source       String?
  extractionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@unique([word, extractionId])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  storyId   Int?
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@unique([userId, postId])
}

model Category {
  id          String                 @id @default(uuid())
  name        String                 @unique
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  extractions CategoryOnExtraction[]
  users       User[]                 @relation("CategoryToUser")
}

model CategoryOnExtraction {
  categoryId   String
  extractionId Int
  category     Category   @relation(fields: [categoryId], references: [id])
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@id([categoryId, extractionId])
}

model LLMFeed {
  id        String   @id @default(uuid())
  text      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]    @relation("LLMFeedToTag")
}

model Tag {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  extractions TagOnExtraction[]
  llmFeeds    LLMFeed[]         @relation("LLMFeedToTag")
}

model TagOnExtraction {
  tagId        String
  extractionId Int
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@id([tagId, extractionId])
}

model ParentTag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  followers   User[]   @relation("ParentTagToUser")
}

model Entity {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  extractions EntityOnExtraction[]
}

model EntityOnExtraction {
  entityId     String
  extractionId Int
  entity       Entity     @relation(fields: [entityId], references: [id])
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@id([entityId, extractionId])
}

enum StoryType {
  DEFINITION
  FACTOID
  DEEP_DIVE
  QUERY
  OPINION
  EVENT
  REVIEW
  CHALLENGE
  OBSERVATION
  CONFLICT
  GUIDANCE
}