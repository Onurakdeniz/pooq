generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  fid          Int        @unique
  pid          String     @unique
  userName     String     @unique
  isRegistered Boolean    @default(false)
  bookmarks    Bookmark[]
  tags         Tag[]
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Author {
  fid       Int      @id @unique
  userName  String
  posts     Post[]
  stories   Story[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id          Int               @id @default(autoincrement())
  hash        String            @unique
  authorId    Int
  text        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isProcessed Boolean           @default(false)
  bookmarks   Bookmark[]
  extraction  Extraction?
  posts       Post[]
  author      Author            @relation(fields: [authorId], references: [fid], onDelete: Cascade)
  categories  CategoryOnStory[]
  tags        TagOnStory[]
}

model Post {
  id          Int         @id @default(autoincrement())
  hash        String      @unique
  authorId    Int
  text        String
  storyId     Int
  isProcessed Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  extraction  Extraction?
  bookmarks   Bookmark[]
  author      Author      @relation(fields: [authorId], references: [fid], onDelete: Cascade)
  story       Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tags        TagOnPost[]
}

model Extraction {
  id               Int                    @id @default(autoincrement())
  storyId          Int?                   @unique
  postId           Int?                   @unique
  title            String
  type             CastType
  mentionedStories String[]
  post             Post?                  @relation(fields: [postId], references: [id], onDelete: Cascade)
  story            Story?                 @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tags             TagOnExtraction[]
  entities         EntityOnExtraction[]
  categories       CategoryOnExtraction[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int?
  postId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@unique([userId, postId])
}

model Category {
  id          String                 @id @default(uuid())
  name        String                 @unique
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  extractions CategoryOnExtraction[]
  users       User[]
  stories     CategoryOnStory[]
}

model CategoryOnStory {
  categoryId String
  storyId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([categoryId, storyId])
}

model CategoryOnExtraction {
  categoryId   String
  extractionId Int
  category     Category   @relation(fields: [categoryId], references: [id])
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@id([categoryId, extractionId])
}

model Tag {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  extractions TagOnExtraction[]
  users       User[]
  stories     TagOnStory[]
  posts       TagOnPost[]
}

model TagOnStory {
  tagId   String
  storyId Int
  tag     Tag    @relation(fields: [tagId], references: [id])
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([tagId, storyId])
}

model TagOnPost {
  tagId  String
  postId Int
  tag    Tag    @relation(fields: [tagId], references: [id])
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([tagId, postId])
}

model TagOnExtraction {
  tagId        String
  extractionId Int
  tag          Tag        @relation(fields: [tagId], references: [id])
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@id([tagId, extractionId])
}

model Entity {
  id          String                     @id @default(uuid())
  name        String               @unique
  description String?
  extractions EntityOnExtraction[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model EntityOnExtraction {
  entityId     String
  extractionId Int
  entity       Entity     @relation(fields: [entityId], references: [id])
  extraction   Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)

  @@id([entityId, extractionId])
}

enum CastType {
  POST
  STORY
}
